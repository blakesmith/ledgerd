syntax = "proto3";

package ledgerd;

message Topic {
    string name = 1;
    uint32 npartitions = 2;
}

message PingRequest {
    string ping = 1;
}
message PingResponse {
    string pong = 1;
}

message TopicOptions {
    bool drop_corrupt = 1;
    uint32 journal_max_size_bytes = 2;
}

enum LedgerdStatus {
    OK = 0;
    NEXT = 1;
    ERR_GENERAL = 2;
    ERR_MEMORY = 3;
    ERR_MKDIR = 4;
    ERR_ARGS = 5;
    ERR_BAD_TOPIC = 6;
    ERR_BAD_PARTITION = 7;
    ERR_BAD_META = 8;
    ERR_BAD_LOCKFILE = 9;
    ERR_IO = 10;
    ERR_POSITION_NOT_FOUND = 11;
    ERR_CONSUMER = 12;
}

message LedgerdResponse {
    LedgerdStatus status = 1;
    string error_message = 2;
}

message OpenTopicRequest {
    string name = 1;
    uint32 partition_count = 2;
    TopicOptions options = 3;
}

message WritePartitionRequest {
    string topic_name = 1;
    uint32 partition_num = 2;
    bytes data = 3;
}

message TopicRequest {
    string topic_name = 1;
}

message TopicResponse {
    bool found = 1;
    Topic topic = 2;
}

message WriteResponse {
    LedgerdResponse ledger_response = 1;
    uint64 message_id = 2;
    uint32 partition_num = 3;
}

message ReadPartitionRequest {
    string topic_name = 1;
    uint32 partition_num = 2;
    uint64 start_id = 3;
    uint32 nmessages = 4;
}

enum PositionBehavior {
    FORGET = 0;
    STORE = 1;
}

message PositionSettings {
    PositionBehavior behavior = 1;
    string position_key = 2;
}

message StreamPartitionRequest {
    string topic_name = 1;
    uint32 partition_num = 2;
    uint64 start_id = 3;
    uint32 read_chunk_size = 4;
    PositionSettings position_settings = 5;
}

message StreamRequest {
    string topic_name = 1;
    uint32 read_chunk_size = 2;
    PositionSettings position_settings = 3;
    repeated uint32 partition_ids = 4;
}

message LedgerdMessage {
    uint64 id = 1;
    bytes data = 2;
}

message LedgerdMessageSet {
    uint64 next_id = 1;
    uint32 partition_num = 2;
    repeated LedgerdMessage messages = 3;
}

message ReadResponse {
    LedgerdResponse ledger_response = 1;
    LedgerdMessageSet messages = 2;
}

service Ledgerd {
    rpc Ping(PingRequest) returns (PingResponse) {}
    rpc OpenTopic(OpenTopicRequest) returns (LedgerdResponse) {}
    rpc GetTopic(TopicRequest) returns (TopicResponse) {}
    rpc WritePartition(WritePartitionRequest) returns (WriteResponse) {}
    rpc ReadPartition(ReadPartitionRequest) returns (ReadResponse) {}
    rpc StreamPartition(StreamPartitionRequest) returns (stream LedgerdMessageSet) {}
    rpc Stream(StreamRequest) returns (stream LedgerdMessageSet) {}
}

